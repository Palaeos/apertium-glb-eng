!!!!!!!!!!!!!!!
!! ATTRIBUTE CATEGORIES
!!!!!!!!!!!!!!!

number = sg pl sp ND;
gender_ENG = m f mf nt GD;
gender_GLB = m f ut nt GD;
det_type = def ind dem itg pos qnt;
definite = def ind;
copula = vbser vblex;
articles = the a an;
degree = comp sup;
person = p1 p2 p3;
finite = pres past fut cni imp;
modal = can should may must could;
aspect = prog impf pros;
tense = [finite] inf pprs ger pp;
out_tense = pprs ger pp;
preflist = aw ex per;

ing = pprs ger;
ptc_type = pprs pp;

!tense_PP = fut cni;
tense_PP = pres past;




!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!

! Because of the almost isolating nature of Globasa, except for pronouns, no inflection information applies so we do not output any here.

n: _;
np: _;
pfx: _;
prn: _.person.gender_GLB.number;
det_pos: _.<pos>.person.gender_GLB.number;
det_pos_cor: _.<pos>;
det_qnt_cor: _.<qnt>;
det_def: _;

! The resulting Globasa determiner will either be possessive with the associated tags "Misu", "yusu", etc. or not

det: (if (1.det_type = qnt)
         1(det_qnt_cor)
      elif (1.HasSuffix = gender_GLB and 1.HasSuffix = number )
         1(det_pos)
      elif (1.det_type = pos)
         1(det_pos_cor)
      else
         1(det_def)
     );

posadj: _.<pos>.person.gender_GLB.number;
adj: _;
num: _;
quant: _;
pr: _;
adv: _;
vbmod: _.tense;

cnjsub: _;

vblex: _.out_tense;
vbinf: _.<inf>;
prepv: _.tense;
copula: _.tense; 
verb: _.tense;
v: _.tense;
vv: _.tense;

vbser: _;
vbdo:  _;
vbhaver: _;

vbpr: _.tense.aspect;



nou: _;

! number is an output of the noun phrase so that the information can be used for determining the right number before in the Globasa.

NP: _.number;
npcomp: _.number;
NNP: _;
CNP: _;
DP: _;
NOM: _;
CONJ: _;

AP: _;
AJ: _.degree;
AJC: _;
AVP: _;

! tense is an output of the verbal phrases so that the information can be used for determining the tense marker in the Globasa.

WILL: _.tense;
BE: _.tense;
HAVE: _.tense;
VP: _.tense;
PVP: _.tense;
DVP: _;
PRN: _.person.gender_GLB.number;
S: _;

REL: _;







!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

!exploits the tense marking on the will auxiliary verb to pick either future or conditional
tense > tense_PP : pres fut, past cni;
tense_PP > tense : pres fut, past cni;

tense > out_tense : pres pres, past past;

gender_ENG > gender_GLB : mf ut, m m, f f, nt nt, GD GD;


!!!!!!!!!!!!!!!
!! MACROS
!!!!!!!!!!!!!!!



!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!

copula -> be@vblex.$tense { 1 } | vbser.$tense { 1 };

quant -> num {1}| det_qnt_cor {1};

!v -> copula.$tense { 1 } | vv.$tense { 1 } | vbhaver.$tense { 1 };

! For lexical verbs, takes adverbs after or or followed by a nominal phrase and converts them into prefixes. For instance "die away" -> "awmorcu"
! This rule interferes with the will/would tense marking.
prepv ->    0.01: vblex.$tense {%1}
            | 0.01:vblex.$tense adv ? ((3.lem/tl in preflist)) {2 %1}|
             0.01:vblex.$tense * adv ? ((3.lem/tl in preflist)) {3 %1 _ 2}
            ;

! Merges open noun-noun compounds together
npcomp ->   n.$number { 1 }|
            n n.$number { 1 2 } |
            n -@guio n.$number { 1 3 } ;




! Accounts for any number of adjectives, even with arbitrary degree adverbs
NP -> npcomp.$number { 1 } |
      0.1: AJC npcomp.$number { 1 _ 2 } ;

! Extracts the number information from the noun to determine the right numeral to put before
NNP ->      1:num NP.$number  { 1 _ %2[number=""] }
            |
            5:det_qnt_cor NP.$number  { 1 _ 2 }
            |
            0.1 : NP.$number  (if (1.number = sg) { un@num _ 1 }
            elif (1.number = pl)  { plu@adj _ 1 }
            else { 1 }
            )|
            ! inserts implied pronouns after adjectives. a numeral if available is used to pick the right number.
            AJC  {  1 _ prpers@prn.p3.GD.sg }|
            quant AJC  (if (1.number = sg)
            { 1 _ 2 _ prpers@prn.p3.GD.sg }
            else
            { 1 _ 2 _ prpers@prn.p3.GD.pl }
            )
            ;

! Translates the number information from the noun into the right numeral to put before.
CNP ->      det_pos.$gender_ENG.$number NNP {1[gender_GLB = 1.gender_ENG>gender_GLB] _ 2 }|
            NNP of@pr prn.$gender_ENG.$number {prprs@det.[3.number].[3.gender_GLB] _ 1 }|
            NNP { 1 };

! Accounts for determiners and removes definite/indefinite articles
DP -> [articles]@det CNP { 2 }|
      det_pos_cor CNP {1 _ 2 }|
      det_def CNP {1 _ 2 }|
      CNP { 1 };


! Accounts for any number of adverbs
AVP -> 0.1:adj.ord AVP { 1 _ 2 }  |
       adj.ord { 1 } |
       0.1:adv AVP { 1 _ 2 }  |
       adv { 1 } ; 

! Accounts for any number of adjectival phrases and carries forth the comparative degree to later convert to an adverb.
AJ -> AVP adj.$degree { 1 _ 2 } |
      adj.$degree { 1 } ;

! Coverts the comparative degree into an adverb.
AJC ->      AJ.comp { maxmo@adv _ 1  }|
            AJ.sup { maxim@adv _ 1  }|
            more@adv AJ { maxmo@adv _ 2 }|
            less@adv AJ { minmo@adv _ 2 }|
            AJ { 1  };

! Accounts for any number of adjectival phrases including comparisons.
AP -> AJC AP { 1 _ 2 } |
      AJC { 1 } ;


WILL ->     will@vbmod.$tense  { 1 }|
            AVP will@vbmod.$tense  { 1 _ 2 };

BE -> WILL.$tense copula  { 2[tense=tense_PP] }|
      copula.$tense { 1 };

HAVE -> WILL.$tense vbhaver@vblex {  2 }|
      vbhaver@vblex.$tense { 1 };


! Detects passive constructions and prefixes the verb accordingly.
vv  -> prepv.$tense { %1 } |
      BE.$tense prepv.pp { be@pfx %2[tense = 1.tense] } |
      BE.$tense prepv.pp by@pr { be@pfx %2[tense = 1.tense] };

! Accounts for any adverb modifying the verb.

VP -> vv.$tense { %1 }| AVP vv.$tense { 1 %2 };


! Translates tense and aspect information either from the inflection or from periphastic constructions.
DVP ->   20:will@vbmod.$tense_PP VP.inf { u@vbpr.[1.tense>tense_PP] _ 2 }|
         20:shall@vbmod.pres VP.inf { u@vbpr.fut _ 2 }|
         will@vbmod.$tense_PP be@vblex.inf VP.ger { u@vbpr.[1.tense>tense_PP].impf _ 3[tense=pres] }|
         will@vbmod.$tense_PP be@vblex.inf go@vblex.[ing] to@pr VP.$tense{ u@vbpr.[1.tense>tense_PP].pros _ 5[tense=inf] }|
         will@vbmod.$tense_PP not@adv be@vblex.inf VP.$tense.ger { u@vbpr.[1.tense>tense_PP].impf.neg _ 4[tense=inf] }|
         will@vbmod.$tense_PP have@vbhaver.inf VP.pp { u@vbpr.[1.tense>tense_PP].perf _ 3[tense=inf] }|
         will@vbmod.$tense_PP have@vbhaver.inf not@adv VP.pp { u@vbpr.[1.tense>tense_PP].perf.neg _ 4[tense=inf] }|
         will@vbmod.$tense_PP not@adv have@vbhaver.inf VP.pp { u@vbpr.[1.tense>tense_PP].perf.neg _ 4[tense=inf] }|
         20:vbdo.$tense VP.inf { u@vbpr.[1.tense].aff _ %2[tense=""] }|
         20:vbdo.$tense not@adv VP.inf { u@vbpr.[1.tense].neg _ 3[tense=inf] }|
         20:have@vbhaver be@vblex.pp VP.ger { u@vbpr.[1.tense] _ dupul@adv _ 3[tense=inf] }|
         20:have@vbhaver %VP.pp{ u@vbpr.[1.tense].perf _ %2[tense=""] }|
         20:have@vbhaver %be@vblex.pp DP { u@vbpr.[1.tense].perf _ %2[tense=""] _ 3 }|  
         20:have@vbhaver %be@vblex.pp AJC { u@vbpr.[1.tense].perf _ %2[tense=""] _ 3 }|
         20:have@vbhaver not@adv %VP.pp { u@vbpr.[1.tense].perf.neg _ %3[tense=""] }|
         20:be@[copula] AJC { u@vbpr.[1.tense] _ %1[tense=""] _ 2 }|
         20:be@[copula] AJC { u@vbpr.[1.tense] _ %1[tense=""] _ 2 }|
         20:be@[copula] not@adv { u@vbpr.[1.tense].neg _ %1[tense=""] }|
         20:be@[copula] not@adv AJC { u@vbpr.[1.tense].neg _ %1[tense=""] _ 3 }|
         BE.[finite] VP.ger { u@vbpr.[1.tense].impf _ %2[tense=""] }|
         BE.[finite] go@vblex.ger to@pr VP.inf { u@vbpr.[1.tense].pros _ %4[tense=""] }|
         [modal]@vbmod VP.inf{ 1 _ u@vbpr.inf _ 2 }|
         20:to@pr VP.inf{ u@vbpr.inf _ 2 }|
         VP.[finite]{ u@vbpr.[1.tense] _ 1 }
         ;

! Abstracts away any pronouns, noun phrases or proper nouns
NOM -> DP {1}| prn {1}| np {1};

CONJ -> for@pr the@det reason@n that@cnjsub {denseba@abv _ hu@cnjsub };

! Translates the relative clause with the resumptive "da" in the right place
REL -> prn.rel DVP {hu@cnjsub _ da@prn _ 2 }|
       prn.rel NOM DVP {hu@cnjsub  _ 2  _ 3  _ da@prn }|
       whom@prn NOM DVP {hu@cnjsub _ 2  _ 3  _ da@prn };

! Attempt to translate the lexical verb questions to starting with "kam"
S ->  do@vbdo.$tense.* NOM VP { kam@adv _ 2 _ u@vbpr.[1.tense] _ 3 }|
      prn.itg do@vbdo.$tense NOM VP { 3 _ u@vbpr.[2.tense] _ 4 _ 1 }|
      there@adv BE.$tense { u@vbpr.[2.tense] _ hay@vblex }; ! Translates "there is", "there was" into "hay"


! Example rule:
! Input:  ^ראש<n><m><sg>/hovud<n><nt><sg>$ ^גדול<adj><m><sg>/stor<adj><nt><sg>$
! Output: ^stor<adj><nt><sg>$ ^hovud<n><nt><sg>$
! NP -> n.$number adj { 2[gender=1.gender, number=1.number] _ 1 } ;

! Resources:
! https://wiki.apertium.org/wiki/Apertium-recursive
! https://wiki.apertium.org/wiki/Apertium-recursive/Formalism
! https://wiki.apertium.org/wiki/Apertium-recursive/Cookbook
